- що як зробити запит на елемент в зв'язному списку, індекс якого більше ніж його розмір?
IndexOutOfBoundsException
- що таке LIFO та FIFO? як це пов'язано з колекціями цього тижня?
черговість обробці у черзі
- на чому краще будувати стек — на масиві, або зв'язковому списку?
звязний список. як передбачити розмір ?
- що таке deque, та як вона відрізняється від arraylist та linkedlist? навіщо вона потрібна? в чому вона краще / гірше?
двунаправленна черга
рекурсивні процедури берем з одного кінця шось робисмо і вставляємо в другий
- де застосовувати arraylist на практиці? а де linkedlist? купу прикладів з реального життя, будь ласка
арей - бібліотека і все шо посписку
линкед - черги різноманітні
- чому в Java ArrayList успадковує Collection, а HashMap — ні?
тому що мапа має два обекта всередині
"бо вони несумісні". В інтерфейсі Collection описано метод add(Object o).
Також, Map мають методи keySet, valueSet, яких немає у Collections.
- чи можна працювати з колекцією з декількох потоків одночасно? які можуть бути проблеми з цим? як їх вирішувати?
юзати пакет concurrent
ну в класі коллекшин там е методи які повертають синхронізавані набори
також vector hashtable
- як влаштований всередині String? якій структурі даних він подібний всередині?
масив чарів
- як зробити ArrayList незмінним, та для чого це може бути корисно?
List.of
- який може бути максимальний розмір LinkedList'у?
скільки памяті хватить або Integer.MAX_VALUE
- які плюси та мінуси у двонаправленого зв'язного списку в порівнянні односпрямованим?
більше памяті забирае це мінус плюс що набагато зручніше ним оперувати
- як інтерфейс Iterable пов'язаний з колекціями?
Ітератор – це спеціальний внутрішній об'єкт у колекції,
 який з одного боку має доступ до всіх її private даних та знає її внутрішню структуру,
 з іншого – реалізує загальнодоступний інтерфейс Iterator, завдяки чому всі знають, як з ним працювати.
- чи можна використовувати ArrayList замість Stack? Чи можна використовувати LinkedList замість Queue? Які плюси та мінуси?
все можна але доцільність того чи іншоговибору треба застосовувати до конкретних задач
- яка колекція більше впливає на час збирання сміття?
та де більше ссилок тобто линкедлист дає проблем для ГК
- яка колекція ефективніше використовує пам'ять? (питання з підступом)
складне питання
попростому то листи
але якщо часто вставляємо всередину та видаляємо то треба тестити можливо і звязні списки
але також можна заюзати свою обертку поверх листа щоб не видаляти елемент а сетати туда null... .
- наскільки робота з ArrayList повільніше роботи зі звичайним Java-масивом?
якщо удачно підібраний розмір під задачу то майже так само бо о і є масив
- що набагато краще для роботи в багатопотоковому режимі — ArrayList або LinkedList?
напевне линкед
- який коефіцієнт розширення краще використовувати для ArrayList?
залежить від бізнес логіки стандарнта  int newSize = defaultCapacity * 3 / 2 + 1;
- чи можна отримати ConcurrentModificationException в однопоточном додатку?
ні
- як правильніше видаляти елементи з колекції в процесі проходу по ній в циклі for? Як все змінюється при використанні ітератора?
видаляти той якого пройшли
ітератори юувають 2х типів fail fast and fail safe
- чому цикл for працює тільки з Iterable? :)
тому що фор це обгортка поверх ітератора
- як цикл for виглядає на рівні байткода Java?
типу if hasnext to get next
- які структури даних схожі за рівнем складності на LinkedList та ArrayList (та Stack, та Queue, та Deque ...) існують в Java?
Дерево
Граф
Префіксне дерево
Хеш-Таблиця
- як впорядкувати LinkedList? та навіщо?
олекшин сорт через компаратор
- як залити дані з однієї колекції до іншої?
або через итератор фор або addAll
- чим ArrayList краще AbstractList, та чим AbstractList краще AbstractCollection?
абстрактні колекції написані для покриття якомога більшої кількості випадків і пропонують узагальнені алгоритми,
тому при створенні конкретної реалізації нерідко є можливість написати продуктивніший код,
заточений під особливості вашої структури даних
- яка колекція найближче асоціюється з біткоїном? :)
звязний список